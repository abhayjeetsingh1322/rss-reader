
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author A. Singh
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Calling get childElement method to get the index of each child
        int titleIndex = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        int descriptionIndex = getChildElement(channel, "description");

        //Declaring XMLTree variables for each child
        XMLTree title = channel.child(titleIndex);
        XMLTree link = channel.child(linkIndex);
        XMLTree description = channel.child(descriptionIndex);

        //Declaring and initializing strings that will hold text values
        String titleText = "";
        String linkText = "";
        String descriptionText = "";

        //If else statements that will extract information from title
        if (title.numberOfChildren() > 0) {
            XMLTree titleChild = title.child(0);
            titleText = titleChild.label();
        } else {
            titleText = "Empty Title";
        }

        //If else statements that will extract information from description
        if (description.numberOfChildren() > 0) {
            XMLTree descriptionChild = description.child(0);
            descriptionText = descriptionChild.label();
        } else {
            descriptionText = "No description";
        }

        //Extracting information from link
        XMLTree linkChild = link.child(0);
        linkText = linkChild.label();

        //Printing to file
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        out.println(titleText);
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.println(
                " <h1><a href=" + linkText + "\">" + titleText + "</a></h1>");
        out.println(" <p>" + descriptionText + "</p>");
        out.println(" <table border = \"1\">");
        out.println("  <tr>");
        out.println("    <th>Date</th>");
        out.println("    <th>Source</th>");
        out.println("    <th>News</th>");
        out.println("  </tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Printing to file
        out.println(" </table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        //Declaring and initializing variables
        int numOfChildren = xml.numberOfChildren();
        boolean childFound = false;

        //Entering while loop to find the index of tag inside XMLTree variable
        int index = 0;
        while (index < numOfChildren && !childFound) {
            XMLTree child = xml.child(index);
            if (child.label().equals(tag)) {
                childFound = true;
                index--;
            }
            index++;
        }

        //If statement to set index to -1 if child is not found
        if (!childFound) {
            index = -1;
        }

        //Returning index
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Calling get childElement method to get the index of each child
        int titleIndex = getChildElement(item, "title");
        int linkIndex = getChildElement(item, "link");
        int descriptionIndex = getChildElement(item, "description");
        int pubDateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");

        //String to hold the title of news article, initializing to avoid redundancy
        String newsText = "No title available";

        out.println("  <tr>");

        //If else statement to extract information from pubDate
        //And printing to file accordingly
        if (pubDateIndex > -1) {
            XMLTree pubDate = item.child(pubDateIndex);
            XMLTree pubDateChild = pubDate.child(0);
            out.println("    <td>" + pubDateChild.label() + "</td>");
        } else {
            out.println("    <td>No date available</td>");
        }

        //If else statements to extract information from source
        //And printing to file accordingly
        if (sourceIndex > -1) {
            XMLTree source = item.child(sourceIndex);
            String sourceURL = source.attributeValue("url");
            if (source.numberOfChildren() > 0) {
                XMLTree sourceChild = source.child(0);
                out.println("    <td><a href=\"" + sourceURL + "\">"
                        + sourceChild.label() + "</a></td>");
            } else {
                out.println("    <td><a href=\"" + sourceURL
                        + "\">No source available</a></td>");
            }
        } else {
            out.println("    <td><a>No source available</a></td>");
        }

        //If statements to extract information from description
        //Checked first because title is supersedes description
        if (descriptionIndex > -1) {
            XMLTree description = item.child(descriptionIndex);
            if (description.numberOfChildren() > 0) {
                XMLTree descriptionChild = description.child(0);
                newsText = descriptionChild.label();
            }
        }

        //If statements to extract information from title
        //Nested if statement allows title to supersede description if available
        //No else clause because newsText is initialized to no title available
        if (titleIndex > -1) {
            XMLTree title = item.child(titleIndex);
            if (title.numberOfChildren() > 0) {
                XMLTree titleChild = title.child(0);
                newsText = titleChild.label();
            }
        }

        //If statements to extract information from link
        //And printing to file accordingly
        if (linkIndex > -1) {
            XMLTree link = item.child(linkIndex);
            XMLTree linkChild = link.child(0);
            out.println("    <td><a href=\"" + linkChild.label() + "\">"
                    + newsText + "</a></td>");
        } else {
            out.println("    <td><a>" + newsText + "</a></td>");
        }

        out.println("  </tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        //Declaring reference variables for input and output to console
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //Prompting user to enter the URL and getting input
        out.print("Enter the URL of the RSS 2.0 feed: ");
        String urlRSS = in.nextLine();

        //Prompting user to enter the output file and getting input
        out.print("Enter the output file (including the .html extension): ");
        String fileName = in.nextLine();

        //Declaring reference variable for output to file
        SimpleWriter fileOut = new SimpleWriter1L(fileName);

        //Declaring XMLTree variable for the URL
        XMLTree rss = new XMLTree1(urlRSS);

        //If else statement to check if URL is valid & telling user accordingly
        if (rss.isTag() && rss.label().equals("rss")
                && rss.attributeValue("version").equals("2.0")) {
            out.println("The URL contains a valid RSS 2.0 XML Document and "
                    + "a valid .html file has been generated.");

            //Declaring XMLTree variable for the channel
            XMLTree channel = rss.child(0);

            //Calling outputHeader method
            outputHeader(channel, fileOut);

            //Enter while loop to iterate through channel children
            int allChannelChildren = channel.numberOfChildren();
            int index = 0;
            while (index < allChannelChildren) {
                XMLTree channelChild = channel.child(index);

                //If statement to check for item
                if (channelChild.isTag()
                        && channelChild.label().equals("item")) {

                    //Calling processItem method
                    processItem(channelChild, fileOut);
                }
                index++;
            }

            //Calling outputFooter method
            outputFooter(fileOut);

        } else {
            out.println(
                    "The URL DOES NOT contain a valid RSS 2.0 XML Document and "
                            + "a valid .html file HAS NOT been generated.");
        }

        //Closing input and output streams
        in.close();
        out.close();
        fileOut.close();
    }

}